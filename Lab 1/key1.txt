Name: Jahan Kuruvilla Cherian
UID: 104436427
TA: Lauren Samy
Prof: Paul Eggert
Lab Assignment #1
File: key1.txt

Exercise 1.1: Moving around in Emacs
C-s U T
C-s I n s t r u c t i o n s
M-< C-s H T 
C-s a r r o w M-b
C-e
C-a
M-<
C-x C-c

Exercise 1.2: Deleting text in Emacs
M-x g o t o - l i n e Enter 1 8 Enter
C-k
C-s < ! C-a C-k
C-s < ! C-a C-k C-k C-k C-k C-k
C-s < ! C-b C-b M-z >
C-x C-c

Exercise 1.3:
C-s A s s i g n m e n t SP 1 M-% A s s i g n m e n t SP 3 7 Enter y y
C-s U T F - 8 M-% U S - A S C I I Enter y
C-s <ol> Enter Enter
C-x C-s Enter y e s

Exercise 1.4: Other editing tasks in Emacs
c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l Enter
M-> C-r - < RIGHT C-SP C-e M-w M-g M-g 337 C-y C-k
M-> C-r - < C-r RIGHT C-SP DOWN DOWN DOWN M-w M-g M-g 298 DOWN DOWN DOWN C-y Enter UP C-d UP C-d
M-> M-r C-r - < RIGHT C-SP C-e M-w M-g M-g 91 DOWN DOWN DOWN C-y
M-> M-r C-r - < C-r RIGHT C-SP C-e M-w M-g M-g 15 DOWN DOWN DOWN C-y
M-> C-r - - - C-SP M-> C-w
C-x-u
C-r < / h t m C-e C-o DOWN < ! - - M-> - - >
M-< M-x r e p l a c e - s t r i n g < o l > Enter < O l > Enter
C-x C-c y
d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f

Exercise 1.5: Doing commands in Emacs 
M-x m a k e - d i r e c t o r y Enter j u n k Enter
C-x C-f j u n k / h e l l o . c Enter
(Copy and Paste the source code form the website)
M-x c o m p i l e BACKSP BACKSP BACKSP BACKSP BACKSP BACKSP BACKSP BACKSP g c c SP h e l l o . c Enter
C-x b h e l l o - o u t
C-u M-! . / a . o u t
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
C-SP M-> M-w C-x C-f k e y 1 . t x t  M-> M-x c l i p b o a r d - y a n k Enter

Exercise 1.6: Running ELisp Code
C-x b Enter
( r a n d o m ) C-j
( s e t q SP x SP ( r a n d o m ) ) C-j
( s e t q SP y SP ( r a n d o m ) ) C-j
( s e t q SP z SP ( r a n d o m ) ) C-j
( * SP x SP y SP z ) C-j
(The product of the three variables evaluates to: 1077246933920480092, which is not the right answer since it should be a negative result
due to the fact that there is some overflow occurring)
M-: ( * SP x SP y SP z ) Enter
(The result remains the same but also includes the octadecimal and hexadecimal values. 1077246933920480092 (#o73631146037755275534, #xef32660ffb57b5c))
(The random generator is not truly random in the mathematical sense because of several reasons. Firstly in a mathematical sense
there is an infinite range to pick numbers from, while in Elisp and any other computing languages, the ranges are limited to finite due to 
obvious memory capacities. Also we notice that when generating three "random" numbers 1/3 of the numbers would always be negative, which suggests
a pattern which is obviously not random. The way this probably works is by using a seed to generate the random number based on a certain time, which 
gives seemingly random results - good enough for most applications - but in reality arent.)
